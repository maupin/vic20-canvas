
function VIC(options) {

  var vic = this;

  var o = options || {};

  o.width = o.width || 22;
  o.height = o.height || 23;
  o.container = o.container || document.body;
  o.pw = o.pixelWidth || 1;
  o.ph = o.pixelHeight || 1;

  var canvas = document.createElement('canvas');
  canvas.width = o.width * 8 * o.pw;
  canvas.height = o.height * 8 * o.ph;

  if (!o.doNotAdd) {
    o.container.appendChild(canvas);
  }
  var context = canvas.getContext('2d');

  var palette = o.palette || [
    '#000000',
    '#ffffff',
    '#8d3e37',
    '#72c1c8',
    '#80348b',
    '#55a049',
    '#40318d',
    '#aab95d',
    '#8b5429',
    '#d59f74',
    '#b86962',
    '#87d6dd',
    '#aa5fb6',
    '#94e089',
    '#8071cc',
    '#ffffb2'
  ];
  
  //color settings
  var screen = 1;
  var border = 3;
  var auxiliary = 0;

  var chars = [];
  var dirtyChars = []; //characters that need to be redrawn
  var drawScheduled = 0;

  //uppercase and symbols
  var charset1 = [
    [28,34,74,86,76,32,30,0],
    [24,36,66,126,66,66,66,0],
    [124,34,34,60,34,34,124,0],
    [28,34,64,64,64,34,28,0],
    [120,36,34,34,34,36,120,0],
    [126,64,64,120,64,64,126,0],
    [126,64,64,120,64,64,64,0],
    [28,34,64,78,66,34,28,0],
    [66,66,66,126,66,66,66,0],
    [28,8,8,8,8,8,28,0],
    [14,4,4,4,4,68,56,0],
    [66,68,72,112,72,68,66,0],
    [64,64,64,64,64,64,126,0],
    [66,102,90,90,66,66,66,0],
    [66,98,82,74,70,66,66,0],
    [24,36,66,66,66,36,24,0],
    [124,66,66,124,64,64,64,0],
    [24,36,66,66,74,36,26,0],
    [124,66,66,124,72,68,66,0],
    [60,66,64,60,2,66,60,0],
    [62,8,8,8,8,8,8,0],
    [66,66,66,66,66,66,60,0],
    [66,66,66,36,36,24,24,0],
    [66,66,66,90,90,102,66,0],
    [66,66,36,24,36,66,66,0],
    [34,34,34,28,8,8,8,0],
    [126,2,4,24,32,64,126,0],
    [60,32,32,32,32,32,60,0],
    [12,16,16,60,16,112,110,0],
    [60,4,4,4,4,4,60,0],
    [0,8,28,42,8,8,8,8],
    [0,0,16,32,127,32,16,0],
    [0,0,0,0,0,0,0,0],
    [8,8,8,8,0,0,8,0],
    [36,36,36,0,0,0,0,0],
    [36,36,126,36,126,36,36,0],
    [8,30,40,28,10,60,8,0],
    [0,98,100,8,16,38,70,0],
    [48,72,72,48,74,68,58,0],
    [4,8,16,0,0,0,0,0],
    [4,8,16,16,16,8,4,0],
    [32,16,8,8,8,16,32,0],
    [8,42,28,62,28,42,8,0],
    [0,8,8,62,8,8,0,0],
    [0,0,0,0,0,8,8,16],
    [0,0,0,126,0,0,0,0],
    [0,0,0,0,0,24,24,0],
    [0,2,4,8,16,32,64,0],
    [60,66,70,90,98,66,60,0],
    [8,24,40,8,8,8,62,0],
    [60,66,2,12,48,64,126,0],
    [60,66,2,28,2,66,60,0],
    [4,12,20,36,126,4,4,0],
    [126,64,120,4,2,68,56,0],
    [28,32,64,124,66,66,60,0],
    [126,66,4,8,16,16,16,0],
    [60,66,66,60,66,66,60,0],
    [60,66,66,62,2,4,56,0],
    [0,0,8,0,0,8,0,0],
    [0,0,8,0,0,8,8,16],
    [14,24,48,96,48,24,14,0],
    [0,0,126,0,126,0,0,0],
    [112,24,12,6,12,24,112,0],
    [60,66,2,12,16,0,16,0],
    [0,0,0,0,255,0,0,0],
    [8,28,62,127,127,28,62,0],
    [16,16,16,16,16,16,16,16],
    [0,0,0,255,0,0,0,0],
    [0,0,255,0,0,0,0,0],
    [0,255,0,0,0,0,0,0],
    [0,0,0,0,0,255,0,0],
    [32,32,32,32,32,32,32,32],
    [4,4,4,4,4,4,4,4],
    [0,0,0,0,224,16,8,8],
    [8,8,8,4,3,0,0,0],
    [8,8,8,16,224,0,0,0],
    [128,128,128,128,128,128,128,255],
    [128,64,32,16,8,4,2,1],
    [1,2,4,8,16,32,64,128],
    [255,128,128,128,128,128,128,128],
    [255,1,1,1,1,1,1,1],
    [0,60,126,126,126,126,60,0],
    [0,0,0,0,0,0,255,0],
    [54,127,127,127,62,28,8,0],
    [64,64,64,64,64,64,64,64],
    [0,0,0,0,3,4,8,8],
    [129,66,36,24,24,36,66,129],
    [0,60,66,66,66,66,60,0],
    [8,28,42,119,42,8,8,0],
    [2,2,2,2,2,2,2,2],
    [8,28,62,127,62,28,8,0],
    [8,8,8,8,255,8,8,8],
    [160,80,160,80,160,80,160,80],
    [8,8,8,8,8,8,8,8],
    [0,0,1,62,84,20,20,0],
    [255,127,63,31,15,7,3,1],
    [0,0,0,0,0,0,0,0],
    [240,240,240,240,240,240,240,240],
    [0,0,0,0,255,255,255,255],
    [255,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,255],
    [128,128,128,128,128,128,128,128],
    [170,85,170,85,170,85,170,85],
    [1,1,1,1,1,1,1,1],
    [0,0,0,0,170,85,170,85],
    [255,254,252,248,240,224,192,128],
    [3,3,3,3,3,3,3,3],
    [8,8,8,8,15,8,8,8],
    [0,0,0,0,15,15,15,15],
    [8,8,8,8,15,0,0,0],
    [0,0,0,0,248,8,8,8],
    [0,0,0,0,0,0,255,255],
    [0,0,0,0,15,8,8,8],
    [8,8,8,8,255,0,0,0],
    [0,0,0,0,255,8,8,8],
    [8,8,8,8,248,8,8,8],
    [192,192,192,192,192,192,192,192],
    [224,224,224,224,224,224,224,224],
    [7,7,7,7,7,7,7,7],
    [255,255,0,0,0,0,0,0],
    [255,255,255,0,0,0,0,0],
    [0,0,0,0,0,255,255,255],
    [1,1,1,1,1,1,1,255],
    [0,0,0,0,240,240,240,240],
    [15,15,15,15,0,0,0,0],
    [8,8,8,8,248,0,0,0],
    [240,240,240,240,0,0,0,0],
    [240,240,240,240,15,15,15,15],
    [227,221,181,169,179,223,225,255],
    [231,219,189,129,189,189,189,255],
    [131,221,221,195,221,221,131,255],
    [227,221,191,191,191,221,227,255],
    [135,219,221,221,221,219,135,255],
    [129,191,191,135,191,191,129,255],
    [129,191,191,135,191,191,191,255],
    [227,221,191,177,189,221,227,255],
    [189,189,189,129,189,189,189,255],
    [227,247,247,247,247,247,227,255],
    [241,251,251,251,251,187,199,255],
    [189,187,183,143,183,187,189,255],
    [191,191,191,191,191,191,129,255],
    [189,153,165,165,189,189,189,255],
    [189,157,173,181,185,189,189,255],
    [231,219,189,189,189,219,231,255],
    [131,189,189,131,191,191,191,255],
    [231,219,189,189,181,219,229,255],
    [131,189,189,131,183,187,189,255],
    [195,189,191,195,253,189,195,255],
    [193,247,247,247,247,247,247,255],
    [189,189,189,189,189,189,195,255],
    [189,189,189,219,219,231,231,255],
    [189,189,189,165,165,153,189,255],
    [189,189,219,231,219,189,189,255],
    [221,221,221,227,247,247,247,255],
    [129,253,251,231,223,191,129,255],
    [195,223,223,223,223,223,195,255],
    [243,239,239,195,239,143,145,255],
    [195,251,251,251,251,251,195,255],
    [255,247,227,213,247,247,247,247],
    [255,255,239,223,128,223,239,255],
    [255,255,255,255,255,255,255,255],
    [247,247,247,247,255,255,247,255],
    [219,219,219,255,255,255,255,255],
    [219,219,129,219,129,219,219,255],
    [247,225,215,227,245,195,247,255],
    [255,157,155,247,239,217,185,255],
    [207,183,183,207,181,187,197,255],
    [251,247,239,255,255,255,255,255],
    [251,247,239,239,239,247,251,255],
    [223,239,247,247,247,239,223,255],
    [247,213,227,193,227,213,247,255],
    [255,247,247,193,247,247,255,255],
    [255,255,255,255,255,247,247,239],
    [255,255,255,129,255,255,255,255],
    [255,255,255,255,255,231,231,255],
    [255,253,251,247,239,223,191,255],
    [195,189,185,165,157,189,195,255],
    [247,231,215,247,247,247,193,255],
    [195,189,253,243,207,191,129,255],
    [195,189,253,227,253,189,195,255],
    [251,243,235,219,129,251,251,255],
    [129,191,135,251,253,187,199,255],
    [227,223,191,131,189,189,195,255],
    [129,189,251,247,239,239,239,255],
    [195,189,189,195,189,189,195,255],
    [195,189,189,193,253,251,199,255],
    [255,255,247,255,255,247,255,255],
    [255,255,247,255,255,247,247,239],
    [241,231,207,159,207,231,241,255],
    [255,255,129,255,129,255,255,255],
    [143,231,243,249,243,231,143,255],
    [195,189,253,243,239,255,239,255],
    [255,255,255,255,0,255,255,255],
    [247,227,193,128,128,227,193,255],
    [239,239,239,239,239,239,239,239],
    [255,255,255,0,255,255,255,255],
    [255,255,0,255,255,255,255,255],
    [255,0,255,255,255,255,255,255],
    [255,255,255,255,255,0,255,255],
    [223,223,223,223,223,223,223,223],
    [251,251,251,251,251,251,251,251],
    [255,255,255,255,31,239,247,247],
    [247,247,247,251,252,255,255,255],
    [247,247,247,239,31,255,255,255],
    [127,127,127,127,127,127,127,0],
    [127,191,223,239,247,251,253,254],
    [254,253,251,247,239,223,191,127],
    [0,127,127,127,127,127,127,127],
    [0,254,254,254,254,254,254,254],
    [255,195,129,129,129,129,195,255],
    [255,255,255,255,255,255,0,255],
    [201,128,128,128,193,227,247,255],
    [191,191,191,191,191,191,191,191],
    [255,255,255,255,252,251,247,247],
    [126,189,219,231,231,219,189,126],
    [255,195,189,189,189,189,195,255],
    [247,227,213,136,213,247,247,255],
    [253,253,253,253,253,253,253,253],
    [247,227,193,128,193,227,247,255],
    [247,247,247,247,0,247,247,247],
    [95,175,95,175,95,175,95,175],
    [247,247,247,247,247,247,247,247],
    [255,255,254,193,171,235,235,255],
    [0,128,192,224,240,248,252,254],
    [255,255,255,255,255,255,255,255],
    [15,15,15,15,15,15,15,15],
    [255,255,255,255,0,0,0,0],
    [0,255,255,255,255,255,255,255],
    [255,255,255,255,255,255,255,0],
    [127,127,127,127,127,127,127,127],
    [85,170,85,170,85,170,85,170],
    [254,254,254,254,254,254,254,254],
    [255,255,255,255,85,170,85,170],
    [0,1,3,7,15,31,63,127],
    [252,252,252,252,252,252,252,252],
    [247,247,247,247,240,247,247,247],
    [255,255,255,255,240,240,240,240],
    [247,247,247,247,240,255,255,255],
    [255,255,255,255,7,247,247,247],
    [255,255,255,255,255,255,0,0],
    [255,255,255,255,240,247,247,247],
    [247,247,247,247,0,255,255,255],
    [255,255,255,255,0,247,247,247],
    [247,247,247,247,7,247,247,247],
    [63,63,63,63,63,63,63,63],
    [31,31,31,31,31,31,31,31],
    [248,248,248,248,248,248,248,248],
    [0,0,255,255,255,255,255,255],
    [0,0,0,255,255,255,255,255],
    [255,255,255,255,255,0,0,0],
    [254,254,254,254,254,254,254,0],
    [255,255,255,255,15,15,15,15],
    [240,240,240,240,255,255,255,255],
    [247,247,247,247,7,255,255,255],
    [15,15,15,15,255,255,255,255],
    [15,15,15,15,240,240,240,240]
  ];

  //lowercase and uppercase
  var charset2 = [
    [28,34,74,86,76,32,30,0],
    [0,0,56,4,60,68,58,0],
    [64,64,92,98,66,98,92,0],
    [0,0,60,66,64,66,60,0],
    [2,2,58,70,66,70,58,0],
    [0,0,60,66,126,64,60,0],
    [12,18,16,124,16,16,16,0],
    [0,0,58,70,70,58,2,60],
    [64,64,92,98,66,66,66,0],
    [8,0,24,8,8,8,28,0],
    [4,0,12,4,4,4,68,56],
    [64,64,68,72,80,104,68,0],
    [24,8,8,8,8,8,28,0],
    [0,0,118,73,73,73,73,0],
    [0,0,92,98,66,66,66,0],
    [0,0,60,66,66,66,60,0],
    [0,0,92,98,98,92,64,64],
    [0,0,58,70,70,58,2,2],
    [0,0,92,98,64,64,64,0],
    [0,0,62,64,60,2,124,0],
    [16,16,124,16,16,18,12,0],
    [0,0,66,66,66,70,58,0],
    [0,0,66,66,66,36,24,0],
    [0,0,65,73,73,73,54,0],
    [0,0,66,36,24,36,66,0],
    [0,0,66,66,70,58,2,60],
    [0,0,126,4,24,32,126,0],
    [60,32,32,32,32,32,60,0],
    [12,16,16,60,16,112,110,0],
    [60,4,4,4,4,4,60,0],
    [0,8,28,42,8,8,8,8],
    [0,0,16,32,127,32,16,0],
    [0,0,0,0,0,0,0,0],
    [8,8,8,8,0,0,8,0],
    [36,36,36,0,0,0,0,0],
    [36,36,126,36,126,36,36,0],
    [8,30,40,28,10,60,8,0],
    [0,98,100,8,16,38,70,0],
    [48,72,72,48,74,68,58,0],
    [4,8,16,0,0,0,0,0],
    [4,8,16,16,16,8,4,0],
    [32,16,8,8,8,16,32,0],
    [8,42,28,62,28,42,8,0],
    [0,8,8,62,8,8,0,0],
    [0,0,0,0,0,8,8,16],
    [0,0,0,126,0,0,0,0],
    [0,0,0,0,0,24,24,0],
    [0,2,4,8,16,32,64,0],
    [60,66,70,90,98,66,60,0],
    [8,24,40,8,8,8,62,0],
    [60,66,2,12,48,64,126,0],
    [60,66,2,28,2,66,60,0],
    [4,12,20,36,126,4,4,0],
    [126,64,120,4,2,68,56,0],
    [28,32,64,124,66,66,60,0],
    [126,66,4,8,16,16,16,0],
    [60,66,66,60,66,66,60,0],
    [60,66,66,62,2,4,56,0],
    [0,0,8,0,0,8,0,0],
    [0,0,8,0,0,8,8,16],
    [14,24,48,96,48,24,14,0],
    [0,0,126,0,126,0,0,0],
    [112,24,12,6,12,24,112,0],
    [60,66,2,12,16,0,16,0],
    [0,0,0,0,255,0,0,0],
    [24,36,66,126,66,66,66,0],
    [124,34,34,60,34,34,124,0],
    [28,34,64,64,64,34,28,0],
    [120,36,34,34,34,36,120,0],
    [126,64,64,120,64,64,126,0],
    [126,64,64,120,64,64,64,0],
    [28,34,64,78,66,34,28,0],
    [66,66,66,126,66,66,66,0],
    [28,8,8,8,8,8,28,0],
    [14,4,4,4,4,68,56,0],
    [66,68,72,112,72,68,66,0],
    [64,64,64,64,64,64,126,0],
    [66,102,90,90,66,66,66,0],
    [66,98,82,74,70,66,66,0],
    [24,36,66,66,66,36,24,0],
    [124,66,66,124,64,64,64,0],
    [24,36,66,66,74,36,26,0],
    [124,66,66,124,72,68,66,0],
    [60,66,64,60,2,66,60,0],
    [62,8,8,8,8,8,8,0],
    [66,66,66,66,66,66,60,0],
    [66,66,66,36,36,24,24,0],
    [66,66,66,90,90,102,66,0],
    [66,66,36,24,36,66,66,0],
    [34,34,34,28,8,8,8,0],
    [126,2,4,24,32,64,126,0],
    [8,8,8,8,255,8,8,8],
    [160,80,160,80,160,80,160,80],
    [8,8,8,8,8,8,8,8],
    [204,204,51,51,204,204,51,51],
    [204,102,51,153,204,102,51,153],
    [0,0,0,0,0,0,0,0],
    [240,240,240,240,240,240,240,240],
    [0,0,0,0,255,255,255,255],
    [255,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,255],
    [128,128,128,128,128,128,128,128],
    [170,85,170,85,170,85,170,85],
    [1,1,1,1,1,1,1,1],
    [0,0,0,0,170,85,170,85],
    [153,51,102,204,153,51,102,204],
    [3,3,3,3,3,3,3,3],
    [8,8,8,8,15,8,8,8],
    [0,0,0,0,15,15,15,15],
    [8,8,8,8,15,0,0,0],
    [0,0,0,0,248,8,8,8],
    [0,0,0,0,0,0,255,255],
    [0,0,0,0,15,8,8,8],
    [8,8,8,8,255,0,0,0],
    [0,0,0,0,255,8,8,8],
    [8,8,8,8,248,8,8,8],
    [192,192,192,192,192,192,192,192],
    [224,224,224,224,224,224,224,224],
    [7,7,7,7,7,7,7,7],
    [255,255,0,0,0,0,0,0],
    [255,255,255,0,0,0,0,0],
    [0,0,0,0,0,255,255,255],
    [1,2,68,72,80,96,64,0],
    [0,0,0,0,240,240,240,240],
    [15,15,15,15,0,0,0,0],
    [8,8,8,8,248,0,0,0],
    [240,240,240,240,0,0,0,0],
    [240,240,240,240,15,15,15,15],
    [227,221,181,169,179,223,225,255],
    [255,255,199,251,195,187,197,255],
    [191,191,163,157,189,157,163,255],
    [255,255,195,189,191,189,195,255],
    [253,253,197,185,189,185,197,255],
    [255,255,195,189,129,191,195,255],
    [243,237,239,131,239,239,239,255],
    [255,255,197,185,185,197,253,195],
    [191,191,163,157,189,189,189,255],
    [247,255,231,247,247,247,227,255],
    [251,255,243,251,251,251,187,199],
    [191,191,187,183,175,151,187,255],
    [231,247,247,247,247,247,227,255],
    [255,255,137,182,182,182,182,255],
    [255,255,163,157,189,189,189,255],
    [255,255,195,189,189,189,195,255],
    [255,255,163,157,157,163,191,191],
    [255,255,197,185,185,197,253,253],
    [255,255,163,157,191,191,191,255],
    [255,255,193,191,195,253,131,255],
    [239,239,131,239,239,237,243,255],
    [255,255,189,189,189,185,197,255],
    [255,255,189,189,189,219,231,255],
    [255,255,190,182,182,182,201,255],
    [255,255,189,219,231,219,189,255],
    [255,255,189,189,185,197,253,195],
    [255,255,129,251,231,223,129,255],
    [195,223,223,223,223,223,195,255],
    [243,239,239,195,239,143,145,255],
    [195,251,251,251,251,251,195,255],
    [255,247,227,213,247,247,247,247],
    [255,255,239,223,128,223,239,255],
    [255,255,255,255,255,255,255,255],
    [247,247,247,247,255,255,247,255],
    [219,219,219,255,255,255,255,255],
    [219,219,129,219,129,219,219,255],
    [247,225,215,227,245,195,247,255],
    [255,157,155,247,239,217,185,255],
    [207,183,183,207,181,187,197,255],
    [251,247,239,255,255,255,255,255],
    [251,247,239,239,239,247,251,255],
    [223,239,247,247,247,239,223,255],
    [247,213,227,193,227,213,247,255],
    [255,247,247,193,247,247,255,255],
    [255,255,255,255,255,247,247,239],
    [255,255,255,129,255,255,255,255],
    [255,255,255,255,255,231,231,255],
    [255,253,251,247,239,223,191,255],
    [195,189,185,165,157,189,195,255],
    [247,231,215,247,247,247,193,255],
    [195,189,253,243,207,191,129,255],
    [195,189,253,227,253,189,195,255],
    [251,243,235,219,129,251,251,255],
    [129,191,135,251,253,187,199,255],
    [227,223,191,131,189,189,195,255],
    [129,189,251,247,239,239,239,255],
    [195,189,189,195,189,189,195,255],
    [195,189,189,193,253,251,199,255],
    [255,255,247,255,255,247,255,255],
    [255,255,247,255,255,247,247,239],
    [241,231,207,159,207,231,241,255],
    [255,255,129,255,129,255,255,255],
    [143,231,243,249,243,231,143,255],
    [195,189,253,243,239,255,239,255],
    [255,255,255,255,0,255,255,255],
    [231,219,189,129,189,189,189,255],
    [131,221,221,195,221,221,131,255],
    [227,221,191,191,191,221,227,255],
    [135,219,221,221,221,219,135,255],
    [129,191,191,135,191,191,129,255],
    [129,191,191,135,191,191,191,255],
    [227,221,191,177,189,221,227,255],
    [189,189,189,129,189,189,189,255],
    [227,247,247,247,247,247,227,255],
    [241,251,251,251,251,187,199,255],
    [189,187,183,143,183,187,189,255],
    [191,191,191,191,191,191,129,255],
    [189,153,165,165,189,189,189,255],
    [189,157,173,181,185,189,189,255],
    [231,219,189,189,189,219,231,255],
    [131,189,189,131,191,191,191,255],
    [231,219,189,189,181,219,229,255],
    [131,189,189,131,183,187,189,255],
    [195,189,191,195,253,189,195,255],
    [193,247,247,247,247,247,247,255],
    [189,189,189,189,189,189,195,255],
    [189,189,189,219,219,231,231,255],
    [189,189,189,165,165,153,189,255],
    [189,189,219,231,219,189,189,255],
    [221,221,221,227,247,247,247,255],
    [129,253,251,231,223,191,129,255],
    [247,247,247,247,0,247,247,247],
    [95,175,95,175,95,175,95,175],
    [247,247,247,247,247,247,247,247],
    [51,51,204,204,51,51,204,204],
    [51,153,204,102,51,153,204,102],
    [255,255,255,255,255,255,255,255],
    [15,15,15,15,15,15,15,15],
    [255,255,255,255,0,0,0,0],
    [0,255,255,255,255,255,255,255],
    [255,255,255,255,255,255,255,0],
    [127,127,127,127,127,127,127,127],
    [85,170,85,170,85,170,85,170],
    [254,254,254,254,254,254,254,254],
    [255,255,255,255,85,170,85,170],
    [102,204,153,51,102,204,153,51],
    [252,252,252,252,252,252,252,252],
    [247,247,247,247,240,247,247,247],
    [255,255,255,255,240,240,240,240],
    [247,247,247,247,240,255,255,255],
    [255,255,255,255,7,247,247,247],
    [255,255,255,255,255,255,0,0],
    [255,255,255,255,240,247,247,247],
    [247,247,247,247,0,255,255,255],
    [255,255,255,255,0,247,247,247],
    [247,247,247,247,7,247,247,247],
    [63,63,63,63,63,63,63,63],
    [31,31,31,31,31,31,31,31],
    [248,248,248,248,248,248,248,248],
    [0,0,255,255,255,255,255,255],
    [0,0,0,255,255,255,255,255],
    [255,255,255,255,255,0,0,0],
    [254,253,187,183,175,159,191,255],
    [255,255,255,255,15,15,15,15],
    [240,240,240,240,255,255,255,255],
    [247,247,247,247,7,255,255,255],
    [15,15,15,15,255,255,255,255],
    [15,15,15,15,240,240,240,240]
  ];

  var charsets = [];

  function addCharset(charset) {
    var newCharset = JSON.parse(JSON.stringify(charset));
    charsets.push(newCharset);
  };

  addCharset(charset1);
  addCharset(charset2);

  var refs = {};

  function addRef(key, data) {
    if (refs[key]) {
      refs[key].push(data);
    } else {
      refs[key] = [data];
    }
  }

  function getRef(key) {
    return refs[key] || [];
  }

  function removeRef(key, data) {
    if (refs[key] && refs[key].indexOf(data) !== -1) {
      refs[key].splice(refs[key].indexOf(data), 1);
    }
  }

  function bankSwitchDown(charsetIndex) {
    var i;
    var key;
    var lkey;
    var ref;
    var refi;
    for (i = 0; i < 256; i++) {
      key = 'cs' + charsetIndex + 'i' + i;
      lkey = 'cs' + (charsetIndex - 1) + 'i' + i;
      ref = getRef(key);
      for (refi = 0; refi < ref.length; refi++) {
        addRef(lkey, ref[refi]);
      }
    }
  }

  function initChars(width, height) {
    var x;
    var y;
    for (x = 0; x < width; x++) {
      var arr = [];
      for (y = 0; y < height; y++) {
        var char = {
          x: x,
          y: y,
          color: 6,
          mode: 0, //1 for multicolor
          charset: 0,
          index: 32
        };
        arr.push(char);
        addRef('cs' + 0 + 'i' + 32, char);
      }
      chars.push(arr);
    }
  };

  initChars(o.width, o.height);

  function drawChar(char) {
    var i;
    var chunk;
    var xp;
    var charset = charsets[char.charset];
    for (i = 0; i < 8; i++) {
      var pixelLine = charset[char.index][i].toString(2);
      while (pixelLine.length < 8) {
        pixelLine = '0' + pixelLine;
      }
      xp = 0;
      while(pixelLine.length) {
        chunk = pixelLine.slice(0, 1 + char.mode);
        pixelLine = pixelLine.slice(1 + char.mode);
        if (chunk === '0' || chunk === '00') {
          //draw screen bg color
          context.fillStyle = palette[screen];
        } else if (chunk === '1' || chunk === '10') {
          //draw char color
          context.fillStyle = palette[char.color];
        } else if (chunk === '01') {
          //draw border color
          context.fillStyle = palette[border];
        } else if (chunk === '11') {
          //draw auxiliary color
          context.fillStyle = palette[auxiliary];
        }
        context.fillRect(char.x * 8 * o.pw + xp, char.y * 8 * o.ph + (i * o.ph), o.pw + (o.pw * char.mode), o.ph);
        xp += o.pw + (char.mode * o.pw);
      }
    }
  };

  function drawDirtyChars() {
    var i;
    for (i = 0; i < dirtyChars.length; i++) {
      drawChar(dirtyChars[i]);
    }
    dirtyChars = [];
    drawScheduled = 0;
  };

  function drawAll() {
    var width = chars.length;
    var height = chars[0].length;
    var x;
    var y;
    for (x = 0; x < width; x++) {
      for (y = 0; y < height; y++) {
        drawChar(chars[x][y]);
      }
    }
    dirtyChars = [];
    drawScheduled = 0;
  }

  function isInteger(value, min, max) {
    if (typeof value === 'number' && 
    isFinite(value) && 
    Math.floor(value) === value && 
    value >= min && 
    value <= max) {
      return true;
    } else {
      return false;
    }
  };

  function scheduleDraw() {
    if (!drawScheduled) {
      drawScheduled = 1;
      window.requestAnimationFrame(drawDirtyChars);
    }
  };

  //

  vic.getCanvas = function() {
    return canvas;
  };

  vic.getPalette = function() {
    return palette.slice();
  };

  vic.setPalette = function(newPalette) {
    if (Array.isArray(newPalette) && newPalette.length === 16) {
      palette = newPalette;
      drawAll();
    }
  };

  vic.getScreenColor = function() {
    return screen;
  };

  vic.setScreenColor = function(ci) {
    if (isInteger(ci, 0, 15)) {
      screen = ci;
      drawAll();
    }
  };

  vic.getBorderColor = function() {
    return border;
  };

  vic.setBorderColor = function(ci) {
    if (isInteger(ci, 0, 7)) {
      border = ci;
      drawAll();
    }
  };

  vic.getAuxiliaryColor = function() {
    return auxiliary;
  };

  vic.setAuxiliaryColor = function(ci) {
    if (isInteger(ci, 0, 15)) {
      auxiliary = ci;
      drawAll();
    }
  };

  vic.getNumberOfCharsets = function() {
    return charsets.length;
  };

  vic.addCharset = function(charSetIndex) {
    var charset = charsets[charSetIndex] || charset1;
    addCharset(charset);
  };

  vic.removeCharset = function() {
    if (charsets.length > 2) {
      bankSwitchDown(charsets.length - 1);
      charsets.pop();
      drawAll();
    }
  };

  vic.getCharacter = function(x, y) {
    var options = null;
    if (isInteger(x, 0, chars.length - 1)) {
      if (isInteger(y, 0, chars[0].length - 1)) {
        char = chars[x][y];
        options = {
          color: char.color,
          mode: char.mode,
          charset: char.charset,
          index: char.index
        };
      }
    }
    return options;
  };

  vic.setCharacter = function(x, y, options) {
    var char = null;
    var oldKey;
    var newKey;
    if (isInteger(x, 0, chars.length - 1)) {
      if (isInteger(y, 0, chars[0].length - 1)) {
        char = chars[x][y];
      }
    }
    if (char && options && typeof options === 'object') {
      oldKey = 'cs' + char.charset + 'i' + char.index;
      if (isInteger(options.color, 0, 7)) {
        char.color = options.color;
      }
      if (isInteger(options.mode, 0, 1)) {
        char.mode = options.mode;
      }
      if (isInteger(options.charset, 0, charsets.length - 1)) {
        char.charset = options.charset;
      }
      if (isInteger(options.index, 0, 255)) {
        char.index = options.index;
      }
      newKey = 'cs' + char.charset + 'i' + char.index;
      if (newKey !== oldKey) {
        removeRef(oldKey, char);
        addRef(newKey, char);
      }
      dirtyChars.push(char);
      scheduleDraw();
    }
  };

  vic.peek = function(charset, index, line) {
    var data = null;
    var charset = charsets[charset];
    if (charset && isInteger(index, 0, 255)) {
      var char = charset[index];
      if (char && isInteger(line, 0, 7)) {
        data = char[line];
      }
    }
    return data;
  };

  vic.poke = function(ci, index, line, value) {
    var charset = charsets[ci];
    var refs;
    var i;
    if (charset && isInteger(index, 0, 255)) {
      var char = charset[index];
      if (char && isInteger(line, 0, 7)) {
        if (isInteger(value, 0, 255)) {
          char.splice(line, 1, value);
          refs = getRef('cs' + ci + 'i' + index);
          for (i = 0; i < refs.length; i++) {
            drawChar(refs[i]);
          }
        }
      }
    }
  };

  vic.redraw = function() {
    drawAll();
  };

  return vic;

};


